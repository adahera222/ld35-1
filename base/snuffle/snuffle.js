// Generated by LiveScript 1.2.0
(function(){
  var initProgram, getProgram, FPS, RES, DIRS, drawCircle, drawTriangle, R, pick, randomColor, Behavior, Snuffle, Blok, makeSnuffles, makeWall, canvas, ctx, start, ENTER, SPACE, drawFrame;
  initProgram = function(){
    var ref$;
    return document.getElementById('program').value = ((ref$ = window.location.hash) != null ? ref$.substr(1) : void 8) || 'ffr.ffr.ffr.ffr.';
  };
  getProgram = function(){
    return document.getElementById('program').value;
  };
  FPS = 30;
  RES = 30;
  DIRS = {
    0: {
      x: 0,
      y: -1,
      deg: 0
    },
    90: {
      x: 1,
      y: 0,
      deg: 90
    },
    180: {
      x: 0,
      y: 1,
      deg: 180
    },
    270: {
      x: -1,
      y: 0,
      deg: 270
    }
  };
  drawCircle = function(color, start, radius, ctx){
    ctx.beginPath();
    ctx.arc(start.x, start.y, radius, 0, 2 * Math.PI);
    ctx.closePath();
    ctx.fillStyle = color;
    return ctx.fill();
  };
  drawTriangle = function(color, start, height, ctx){
    ctx.fillStyle = color;
    ctx.moveTo(start.x, start.y);
    ctx.beginPath();
    ctx.lineTo(start.x + height / 2, start.y + height);
    ctx.lineTo(start.x - height / 2, start.y + height);
    ctx.lineTo(start.x, start.y);
    ctx.closePath();
    return ctx.fill();
  };
  R = function(it){
    return ~~(it * Math.random());
  };
  pick = function(it){
    return it[R(it.length)];
  };
  randomColor = function(){
    var palette;
    palette = '0123456789ABCDEF';
    return '#' + pick(palette) + pick(palette) + pick(palette);
  };
  Behavior = (function(){
    Behavior.displayName = 'Behavior';
    var prototype = Behavior.prototype, constructor = Behavior;
    function Behavior(method, tape){
      this.method = method;
      this.tape = tape != null ? tape : null;
      this.perform = bind$(this, 'perform', prototype);
      this.pointer = 0;
    }
    prototype.perform = function(target){
      if (this.pointer > this.tape.length) {
        return null;
      }
      target[this.method](this.tape[this.pointer]);
      return this.pointer++;
    };
    return Behavior;
  }());
  Snuffle = (function(){
    Snuffle.displayName = 'Snuffle';
    var prototype = Snuffle.prototype, constructor = Snuffle;
    function Snuffle(nose, band, body, x, y, height){
      this.nose = nose;
      this.band = band;
      this.body = body;
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.height = height != null ? height : RES;
      this.orientation = bind$(this, 'orientation', prototype);
      this.stop = bind$(this, 'stop', prototype);
      this.draw = bind$(this, 'draw', prototype);
      this.tick = bind$(this, 'tick', prototype);
      this.center = bind$(this, 'center', prototype);
      this.speed = 2;
      this.rotation = 0;
      this.step = this.height;
    }
    prototype.center = function(){
      var h2;
      h2 = ~~(this.height / 2);
      return {
        x: this.x,
        y: this.y + h2
      };
    };
    prototype.tick = function(){
      var ref$;
      this.x += ~~this.vx * this.speed;
      this.y += ~~this.vy * this.speed;
      return this.rotation += ((~~this.va) % (ref$ = 360) + ref$) % ref$;
    };
    prototype.draw = function(ctx){
      var cc;
      ctx.save();
      cc = {
        x: 0,
        y: 0
      };
      if (this.rotation) {
        cc = this.center();
        ctx.translate(cc.x, cc.y);
        ctx.rotate((Math.PI / 180) * this.rotation);
      }
      drawTriangle(this.body, {
        x: this.x - cc.x,
        y: this.y - cc.y
      }, this.height, ctx);
      drawTriangle(this.band, {
        x: this.x - cc.x,
        y: this.y - cc.y
      }, 0.4 * this.height, ctx);
      drawTriangle(this.nose, {
        x: this.x - cc.x,
        y: this.y - cc.y
      }, 0.3 * this.height, ctx);
      return ctx.restore();
    };
    prototype.stop = function(){
      this.vx = 0;
      this.vy = 0;
      return this.va = 0;
    };
    prototype.orientation = function(rotation){
      var ind, ref$;
      rotation == null && (rotation = this.rotation);
      ind = ((~~((rotation + 44) / 90)) % (ref$ = 4) + ref$) % ref$;
      console.log("rotation: " + rotation + " :: ind: " + ind);
      return DIRS[ind * 90];
    };
    prototype.move = function(dir){
      var ori;
      ori = this.orientation();
      this.stop();
      switch (dir) {
      case 'f':
        this.vx = ori.x;
        return this.vy = ori.y;
      case 'b':
        this.vx = -ori.x;
        return this.vy = -ori.y;
      case 'p':
        ori = this.orientation(this.rotation + 270);
        this.vx = ori.x;
        return this.vy = ori.y;
      case 's':
        ori = this.orientation(this.rotation + 90);
        this.vx = ori.x;
        return this.vy = ori.y;
      case 'r':
        return this.va = 90 / (FPS / 2);
      case 'l':
        return this.va = -90 / (FPS / 2);
      case 'U':
        return this.rotation = 0;
      case 'R':
        return this.rotation = 90;
      case 'D':
        return this.rotation = 180;
      case 'L':
        return this.rotation = 270;
      default:
        return 'nothing';
      }
    };
    return Snuffle;
  }());
  Blok = (function(){
    Blok.displayName = 'Blok';
    var prototype = Blok.prototype, constructor = Blok;
    function Blok(hour, decade, instant, x, y, height){
      this.hour = hour;
      this.decade = decade;
      this.instant = instant;
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.height = height != null ? height : RES;
      this.center = bind$(this, 'center', prototype);
    }
    prototype.center = function(){
      var h2;
      h2 = ~~(this.height / 2);
      return {
        x: this.x + h2,
        y: this.y + h2
      };
    };
    prototype.pos = {
      x: Blok.x,
      y: Blok.y
    };
    prototype.draw = function(ctx){
      var h2, h4;
      ctx.save();
      ctx.fillStyle = this.decade;
      ctx.fillRect(this.x, this.y, this.height, this.height);
      h2 = ~~(this.height / 2);
      this.drawTriangle(this.hour, this.center(), {
        x: h2,
        y: h2
      }, {
        x: -h2,
        y: h2
      }, ctx);
      this.drawTriangle(this.hour, this.center(), {
        x: h2,
        y: -h2
      }, {
        x: -h2,
        y: -h2
      }, ctx);
      if (this.instant) {
        h4 = ~~(this.height / 4);
        ctx.fillStyle = this.instant;
        ctx.fillRect(this.x + h4, this.y + h4, 2 * h4, 2 * h4);
      }
      return ctx.restore();
    };
    prototype.drawCorners = function(ctx){
      var h4, h2;
      h4 = ~~(this.height / 4);
      h2 = ~~(this.height / 2);
      this.drawTriangle(this.hour, {
        x: this.x,
        y: this.y
      }, {
        x: h4,
        y: 0
      }, {
        x: 0,
        y: h2
      });
      this.drawTriangle(this.hour, {
        x: this.x + this.height,
        y: this.y
      }, {
        x: -h4,
        y: 0
      }, {
        x: 0,
        y: h2
      });
      this.drawTriangle(this.hour, {
        x: this.x,
        y: this.y + this.height
      }, {
        x: h4,
        y: 0
      }, {
        x: 0,
        y: -h2
      });
      return this.drawTriangle(this.hour, {
        x: this.x + this.height,
        y: this.y + this.height
      }, {
        x: -h4,
        y: 0
      }, {
        x: 0,
        y: -h2
      });
    };
    prototype.drawTriangle = function(fill, start, diff1, diff2, ctx){
      ctx.moveTo(start.x, start.y);
      ctx.beginPath();
      ctx.lineTo(start.x + diff1.x, start.y + diff1.y);
      ctx.lineTo(start.x + diff2.x, start.y + diff2.y);
      ctx.lineTo(start.x, start.y);
      ctx.closePath();
      ctx.fillStyle = fill;
      return ctx.fill();
    };
    return Blok;
  }());
  makeSnuffles = function(){
    var i$, x, snuff, results$ = [];
    for (i$ = 0; i$ < 18; ++i$) {
      x = i$;
      snuff = new Snuffle(randomColor(), randomColor(), randomColor(), RES * (2 + x) - RES / 2, 10 * RES);
      snuff.behavior = new Behavior('move', getProgram());
      snuff.rotation = 90 * R(4);
      snuff.rotation = 0;
      results$.push(snuff);
    }
    return results$;
  };
  makeWall = function(){
    var colors, centerColors, i$, x, blok, results$ = [];
    colors = ['#aca', '#bdb', '#beb', '#ada', '#cec', '#cfc'];
    centerColors = ['#ccc', '#cfc'];
    for (i$ = 0; i$ < 400; ++i$) {
      x = i$;
      results$.push(blok = new Blok(pick(colors), pick(colors), pick(centerColors), ~~(x / 20) * RES, ~~(x % 20) * RES));
    }
    return results$;
  };
  canvas = document.getElementById('canvas');
  ctx = canvas.getContext('2d');
  window.snuffles = makeSnuffles();
  window.wall = makeWall();
  start = function(){
    window.snuffles = makeSnuffles();
    return window.wall = makeWall();
  };
  ENTER = 13;
  SPACE = 32;
  document.onkeypress = function(ev){
    console.log(ev);
    switch (ev.which) {
    case ENTER:
      return start();
    default:
      return 'nothing';
    }
  };
  window.frame = 0;
  drawFrame = function(){
    var i$, ref$, len$, blok, snuff;
    if (window.stop) {
      return;
    }
    ctx.clearRect(0, 0, 800, 600);
    for (i$ = 0, len$ = (ref$ = window.wall).length; i$ < len$; ++i$) {
      blok = ref$[i$];
      blok.draw(ctx);
    }
    for (i$ = 0, len$ = (ref$ = window.snuffles).length; i$ < len$; ++i$) {
      snuff = ref$[i$];
      snuff.tick();
      if (window.frame % (FPS / 2) === 0) {
        snuff.behavior.perform(snuff);
      }
      snuff.draw(ctx);
    }
    return window.frame++;
  };
  setInterval(drawFrame, 1000 / FPS);
  window.stop = false;
  initProgram();
  start();
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
